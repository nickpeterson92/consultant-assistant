[run]
# Coverage.py configuration for multi-agent orchestrator

# Source packages to measure
source = src

# Omit files from coverage
omit = 
    */tests/*
    */__pycache__/*
    */venv/*
    */env/*
    */.venv/*
    */site-packages/*
    */migrations/*
    */__init__.py
    */conftest.py
    */setup.py

# Enable branch coverage
branch = True

# Parallel execution support
parallel = True
concurrency = multiprocessing,thread

# Context for coverage
context = ${CONTEXT}

[report]
# Reporting configuration
precision = 2
show_missing = True
skip_covered = False
skip_empty = True

# Exclude lines from coverage
exclude_lines =
    # Standard pragmas
    pragma: no cover
    
    # Debugging code
    def __repr__
    if self\.debug
    if settings\.DEBUG
    
    # Error handling
    raise AssertionError
    raise NotImplementedError
    
    # Non-runtime code
    if 0:
    if False:
    if __name__ == .__main__.:
    
    # Abstract methods
    @abstract
    @abstractmethod
    
    # Type checking
    if TYPE_CHECKING:
    @overload
    
    # Logging
    logger\.debug
    
    # Defensive programming
    pass

# Ignore errors when trying to cover non-existent files
ignore_errors = True

[html]
# HTML report configuration
directory = htmlcov
title = Multi-Agent Orchestrator Coverage Report
show_contexts = True

[xml]
# XML report for CI/CD integration
output = coverage.xml

[json]
# JSON report for programmatic access
output = coverage.json
show_contexts = True

[paths]
# Path aliases for combining coverage from different environments
source =
    src/
    */src/
    */site-packages/src/