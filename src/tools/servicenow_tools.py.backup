"""ServiceNow ITSM Tools - Enterprise-Grade IT Service Management Operations.

This module implements 15 comprehensive ServiceNow tools for IT Service Management:

Architecture Philosophy:
- **Query Builder Pattern**: Composable, reusable, and secure query construction
- **Security-First**: Automatic input sanitization through GlideQueryBuilder
- **Natural Language**: Support for human-friendly queries
- **Consistent Error Handling**: Graceful degradation with structured responses
- **Performance Optimized**: Field selection and pagination support

Tool Categories:
1. Incident Management (3 tools) - Core ITSM incident lifecycle
2. Change Management (3 tools) - Change request handling
3. Problem Management (3 tools) - Root cause analysis records
4. Task Management (3 tools) - Generic task operations
5. User & CMDB Tools (3 tools) - User, CI, and global search
"""

import os
import json
from typing import Optional, List, Dict, Any, Union
from datetime import datetime
import requests
from requests.auth import HTTPBasicAuth

from pydantic import BaseModel, Field, field_validator
from langchain.tools import BaseTool

from src.utils.logging import get_logger
from src.utils.glide_query_builder import (
    GlideQueryBuilder,
    GlideOperator,
    QueryTemplates,
    escape_glide_query
)

# Initialize logger
logger = get_logger("servicenow")


def log_glide_query(tool_name: str, query: str, operation: str = "query_built"):
    """Log Glide query for debugging and monitoring."""
    logger.info("glide_query",
        component="servicenow",
        tool_name=tool_name,
        operation=operation,
        query=query,
        query_length=len(query)
    )


class ServiceNowClient:
    """ServiceNow API client with connection management."""
    
    def __init__(self, instance: str, username: str, password: str):
        """Initialize ServiceNow client."""
        self.instance = instance.rstrip('/')
        if not self.instance.startswith('https://'):
            self.instance = f"https://{self.instance}"
        self.auth = HTTPBasicAuth(username, password)
        self.headers = {
            "Content-Type": "application/json",
            "Accept": "application/json"
        }
    
    def _make_request(self, method: str, endpoint: str, params: Dict = None, data: Dict = None) -> Dict:
        """Make a request to ServiceNow API with error handling."""
        url = f"{self.instance}/api/now/table/{endpoint}"
        
        try:
            response = requests.request(
                method=method,
                url=url,
                auth=self.auth,
                headers=self.headers,
                params=params,
                json=data
            )
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            logger.error("servicenow_api_error",
                component="servicenow",
                operation=f"{method}_{endpoint}",
                error=str(e),
                status_code=getattr(e.response, 'status_code', None)
            )
            raise
    
    def query(self, table: str, params: Dict) -> List[Dict]:
        """Query ServiceNow table."""
        result = self._make_request("GET", table, params=params)
        return result.get("result", [])
    
    def get(self, table: str, sys_id: str, params: Dict = None) -> Dict:
        """Get single record by sys_id."""
        result = self._make_request("GET", f"{table}/{sys_id}", params=params)
        return result.get("result", {})
    
    def create(self, table: str, data: Dict) -> Dict:
        """Create new record."""
        result = self._make_request("POST", table, data=data)
        return result.get("result", {})
    
    def update(self, table: str, sys_id: str, data: Dict) -> Dict:
        """Update existing record."""
        result = self._make_request("PATCH", f"{table}/{sys_id}", data=data)
        return result.get("result", {})


def get_servicenow_connection() -> ServiceNowClient:
    """Create and return a ServiceNow client using environment variables."""
    return ServiceNowClient(
        instance=os.environ['SNOW_INSTANCE'],
        username=os.environ['SNOW_USER'],
        password=os.environ['SNOW_PASS']
    )


def format_servicenow_record(record: Dict, fields: List[str] = None) -> str:
    """Format a ServiceNow record for display."""
    if not record:
        return "No record found"
    
    # Default fields if none specified
    if not fields:
        fields = ["number", "short_description", "state", "priority", "assigned_to", "sys_id"]
    
    lines = []
    for field in fields:
        if field in record:
            value = record[field]
            # Handle nested display values
            if isinstance(value, dict) and "display_value" in value:
                value = value["display_value"]
            lines.append(f"- {field.replace('_', ' ').title()}: {value}")
    
    return "\n".join(lines)


# ============================================================================
# INCIDENT MANAGEMENT TOOLS
# ============================================================================

class GetIncidentTool(BaseTool):
    """Search for incidents using natural language or specific criteria."""
    
    name = "get_incident"
    description = """Search/retrieve ServiceNow incidents by number, description, caller, or assignment group.
    
    Examples:
    - "critical incidents from last week"
    - "incidents assigned to john.smith"
    - "network-related incidents"
    - "open P1 incidents"
    
    Supports filtering by state, priority, assignment, keywords, and date ranges."""
    
    class InputSchema(BaseModel):
        query: str = Field(description="Natural language search query for incidents")
        limit: int = Field(default=10, description="Maximum number of results (default 10)")
        
    args_schema = InputSchema
    
    def _run(self, query: str, limit: int = 10) -> str:
        """Search for incidents based on query."""
        try:
            client = get_servicenow_connection()
            builder = GlideQueryBuilder()
            
            # Parse natural language query
            query_lower = query.lower()
            
            # State filters
            if any(word in query_lower for word in ["open", "active", "unresolved"]):
                builder.add_condition("state", GlideOperator.NOT_IN, "6,7,8")  # Not Resolved/Closed/Canceled
            elif "closed" in query_lower:
                builder.add_condition("state", GlideOperator.EQUALS, "7")
            elif "resolved" in query_lower:
                builder.add_condition("state", GlideOperator.EQUALS, "6")
            
            # Priority filters
            if any(word in query_lower for word in ["critical", "p1", "priority 1"]):
                builder.add_condition("priority", GlideOperator.EQUALS, "1")
            elif any(word in query_lower for word in ["high", "p2", "priority 2"]):
                builder.add_condition("priority", GlideOperator.EQUALS, "2")
            elif "low" in query_lower:
                builder.add_condition("priority", GlideOperator.GREATER_OR_EQUAL, "4")
            
            # Assignment filters
            if "assigned to me" in query_lower or "my incidents" in query_lower:
                builder.add_condition("assigned_to", GlideOperator.EQUALS, "javascript:gs.getUserID()")
            elif "assigned to" in query_lower:
                # Extract username after "assigned to"
                parts = query_lower.split("assigned to")
                if len(parts) > 1:
                    username = parts[1].strip().split()[0]
                    builder.add_condition("assigned_to.user_name", GlideOperator.CONTAINS, username)
            elif "unassigned" in query_lower:
                builder.add_condition("assigned_to", GlideOperator.IS_EMPTY, "")
            
            # Time filters
            if "today" in query_lower:
                builder.add_condition("opened_at", GlideOperator.GREATER_THAN, "javascript:gs.daysAgo(1)")
            elif "yesterday" in query_lower:
                builder.add_condition("opened_at", GlideOperator.BETWEEN, "javascript:gs.daysAgo(2)@javascript:gs.daysAgo(1)")
            elif "last week" in query_lower:
                builder.add_condition("opened_at", GlideOperator.GREATER_THAN, "javascript:gs.daysAgo(7)")
            elif "last month" in query_lower:
                builder.add_condition("opened_at", GlideOperator.GREATER_THAN, "javascript:gs.daysAgo(30)")
            
            # Keyword search
            keywords = [word for word in query.split() if len(word) > 3 and word.lower() not in 
                       ["incident", "incidents", "from", "last", "week", "month", "assigned", "priority", "open", "closed"]]
            if keywords:
                builder.add_condition("short_description", GlideOperator.CONTAINS, " ".join(keywords))
            
            # Default ordering
            builder.order_by("priority", ascending=True)
            builder.order_by("opened_at", ascending=False)
            builder.limit(limit)
            
            params = builder.build_params()
            log_glide_query("search_incidents", params.get("sysparm_query", ""))
            
            incidents = client.query("incident", params)
            
            if not incidents:
                return "No incidents found matching your search criteria."
            
            results = [f"Found {len(incidents)} incident(s):\n"]
            for inc in incidents:
                results.append(f"\n{inc['number']}:")
                results.append(format_servicenow_record(inc, 
                    ["short_description", "state", "priority", "assigned_to", "opened_at"]))
            
            return "\n".join(results)
            
        except Exception as e:
            logger.error("search_incidents_error",
                component="servicenow",
                operation="search_incidents",
                error=str(e)
            )
            return f"Error searching incidents: {str(e)}"


class GetIncidentTool(BaseTool):
    """Get detailed information about a specific incident."""
    
    name = "get_incident"
    description = """Retrieve detailed information about a ServiceNow incident.
    
    Provide either:
    - Incident number (e.g., "INC0010023")
    - System ID (32-character hex string)"""
    
    class InputSchema(BaseModel):
        incident_id: str = Field(description="Incident number (INC0010023) or sys_id")
        
    args_schema = InputSchema
    
    def _run(self, incident_id: str) -> str:
        """Get incident details."""
        try:
            client = get_servicenow_connection()
            
            # Check if it's an incident number or sys_id
            if incident_id.upper().startswith("INC"):
                # Query by number
                builder = GlideQueryBuilder()
                builder.add_condition("number", GlideOperator.EQUALS, incident_id.upper())
                params = builder.build_params()
                
                incidents = client.query("incident", params)
                if not incidents:
                    return f"No incident found with number: {incident_id}"
                incident = incidents[0]
            else:
                # Get by sys_id
                incident = client.get("incident", incident_id)
                if not incident:
                    return f"No incident found with ID: {incident_id}"
            
            # Format detailed response
            details = [f"Incident Details - {incident.get('number', 'Unknown')}:\n"]
            
            # Key fields to display
            fields = [
                "number", "short_description", "description", "state", "priority", 
                "category", "subcategory", "assigned_to", "assignment_group",
                "caller_id", "opened_at", "resolved_at", "closed_at",
                "resolution_code", "close_notes", "sys_id"
            ]
            
            details.append(format_servicenow_record(incident, fields))
            
            return "\n".join(details)
            
        except Exception as e:
            logger.error("get_incident_error",
                component="servicenow",
                operation="get_incident",
                error=str(e),
                incident_id=incident_id
            )
            return f"Error retrieving incident: {str(e)}"


class CreateIncidentTool(BaseTool):
    """Create a new incident in ServiceNow."""
    
    name = "create_incident"
    description = """Create a new ServiceNow incident with the provided details.
    
    Required: short_description
    Optional: description, priority (1-5), category, caller, assignment_group"""
    
    class InputSchema(BaseModel):
        short_description: str = Field(description="Brief description of the incident")
        description: Optional[str] = Field(None, description="Detailed description")
        priority: Optional[str] = Field("3", description="Priority (1=Critical, 2=High, 3=Moderate, 4=Low, 5=Planning)")
        category: Optional[str] = Field(None, description="Category (e.g., 'Software', 'Hardware', 'Network')")
        subcategory: Optional[str] = Field(None, description="Subcategory")
        caller_id: Optional[str] = Field(None, description="Caller's username or email")
        assignment_group: Optional[str] = Field(None, description="Assignment group name")
        
        @field_validator('priority')
        def validate_priority(cls, v):
            if v and v not in ["1", "2", "3", "4", "5"]:
                raise ValueError("Priority must be between 1 and 5")
            return v
    
    args_schema = InputSchema
    
    def _run(self, short_description: str, description: Optional[str] = None,
             priority: Optional[str] = "3", category: Optional[str] = None,
             subcategory: Optional[str] = None, caller_id: Optional[str] = None,
             assignment_group: Optional[str] = None) -> str:
        """Create a new incident."""
        try:
            client = get_servicenow_connection()
            
            # Build incident data
            incident_data = {
                "short_description": short_description,
                "priority": priority,
                "state": "1",  # New
                "impact": priority,  # Match impact to priority
                "urgency": priority,  # Match urgency to priority
            }
            
            if description:
                incident_data["description"] = description
            if category:
                incident_data["category"] = category
            if subcategory:
                incident_data["subcategory"] = subcategory
            if caller_id:
                incident_data["caller_id"] = caller_id
            if assignment_group:
                incident_data["assignment_group"] = assignment_group
            
            # Create the incident
            result = client.create("incident", incident_data)
            
            if result:
                return f"""✓ Incident created successfully:
- Number: {result.get('number')}
- State: {result.get('state', {}).get('display_value', 'New')}
- Priority: {result.get('priority', {}).get('display_value', priority)}
- Assigned To: {result.get('assigned_to', {}).get('display_value', 'Unassigned')}
- Sys ID: {result.get('sys_id')}"""
            else:
                return "Failed to create incident - no response from ServiceNow"
                
        except Exception as e:
            logger.error("create_incident_error",
                component="servicenow",
                operation="create_incident",
                error=str(e)
            )
            return f"Error creating incident: {str(e)}"


class UpdateIncidentTool(BaseTool):
    """Update an existing incident in ServiceNow."""
    
    name = "update_incident"
    description = """Update a ServiceNow incident's fields.
    
    Common updates:
    - Change state (New, In Progress, Resolved, Closed)
    - Update priority or assignment
    - Add work notes or resolution"""
    
    class InputSchema(BaseModel):
        incident_id: str = Field(description="Incident number (INC0010023) or sys_id")
        state: Optional[str] = Field(None, description="State (1=New, 2=In Progress, 6=Resolved, 7=Closed)")
        priority: Optional[str] = Field(None, description="Priority (1-5)")
        assigned_to: Optional[str] = Field(None, description="Username to assign to")
        assignment_group: Optional[str] = Field(None, description="Assignment group")
        work_notes: Optional[str] = Field(None, description="Work notes to add")
        close_notes: Optional[str] = Field(None, description="Resolution/close notes")
        resolution_code: Optional[str] = Field(None, description="Resolution code")
        
    args_schema = InputSchema
    
    def _run(self, incident_id: str, **kwargs) -> str:
        """Update an incident."""
        try:
            client = get_servicenow_connection()
            
            # Get the incident first
            if incident_id.upper().startswith("INC"):
                builder = GlideQueryBuilder()
                builder.add_condition("number", GlideOperator.EQUALS, incident_id.upper())
                params = builder.build_params()
                
                incidents = client.query("incident", params)
                if not incidents:
                    return f"No incident found with number: {incident_id}"
                sys_id = incidents[0]["sys_id"]
            else:
                sys_id = incident_id
            
            # Build update data
            update_data = {}
            for field, value in kwargs.items():
                if value is not None:
                    update_data[field] = value
            
            if not update_data:
                return "No fields to update provided"
            
            # Update the incident
            result = client.update("incident", sys_id, update_data)
            
            if result:
                updates = []
                for field, value in update_data.items():
                    updates.append(f"- {field}: {value}")
                
                return f"""✓ Incident {result.get('number')} updated successfully:
{chr(10).join(updates)}

Current State: {result.get('state', {}).get('display_value', 'Unknown')}"""
            else:
                return "Failed to update incident"
                
        except Exception as e:
            logger.error("update_incident_error",
                component="servicenow",
                operation="update_incident",
                error=str(e),
                incident_id=incident_id
            )
            return f"Error updating incident: {str(e)}"


# ============================================================================
# CHANGE MANAGEMENT TOOLS
# ============================================================================

class GetChangeRequestTool(BaseTool):
    """Search for change requests using natural language or specific criteria."""
    
    name = "get_change"
    description = """Search for ServiceNow change requests by number, type, state, or assignment.
    
    Examples:
    - "emergency changes this week"
    - "changes pending approval"
    - "failed changes last month"
    - "changes for production servers"""
    
    class InputSchema(BaseModel):
        query: str = Field(description="Natural language search query for change requests")
        limit: int = Field(default=10, description="Maximum number of results")
        
    args_schema = InputSchema
    
    def _run(self, query: str, limit: int = 10) -> str:
        """Search for change requests."""
        try:
            client = get_servicenow_connection()
            builder = GlideQueryBuilder()
            
            query_lower = query.lower()
            
            # Type filters
            if "emergency" in query_lower:
                builder.add_condition("type", GlideOperator.EQUALS, "Emergency")
            elif "standard" in query_lower:
                builder.add_condition("type", GlideOperator.EQUALS, "Standard")
            elif "normal" in query_lower:
                builder.add_condition("type", GlideOperator.EQUALS, "Normal")
            
            # State filters
            if "pending approval" in query_lower or "awaiting approval" in query_lower:
                builder.add_condition("state", GlideOperator.EQUALS, "-5")  # Pending Approval
            elif "scheduled" in query_lower:
                builder.add_condition("state", GlideOperator.EQUALS, "1")  # Scheduled
            elif "implement" in query_lower:
                builder.add_condition("state", GlideOperator.EQUALS, "2")  # Implement
            elif "failed" in query_lower:
                builder.add_condition("state", GlideOperator.EQUALS, "4")  # Failed
            elif "complete" in query_lower or "successful" in query_lower:
                builder.add_condition("state", GlideOperator.EQUALS, "3")  # Complete
            
            # Time filters
            if "today" in query_lower:
                builder.add_condition("opened_at", GlideOperator.GREATER_THAN, "javascript:gs.daysAgo(1)")
            elif "this week" in query_lower:
                builder.add_condition("opened_at", GlideOperator.GREATER_THAN, "javascript:gs.daysAgo(7)")
            elif "last month" in query_lower:
                builder.add_condition("opened_at", GlideOperator.GREATER_THAN, "javascript:gs.daysAgo(30)")
            
            # Keyword search
            keywords = [word for word in query.split() if len(word) > 3 and word.lower() not in 
                       ["change", "changes", "request", "from", "this", "last", "week", "month"]]
            if keywords:
                builder.add_condition("short_description", GlideOperator.CONTAINS, " ".join(keywords))
            
            builder.order_by("start_date", ascending=False)
            builder.limit(limit)
            
            params = builder.build_params()
            log_glide_query("search_changes", params.get("sysparm_query", ""))
            
            changes = client.query("change_request", params)
            
            if not changes:
                return "No change requests found matching your search criteria."
            
            results = [f"Found {len(changes)} change request(s):\n"]
            for chg in changes:
                results.append(f"\n{chg['number']}:")
                results.append(format_servicenow_record(chg, 
                    ["short_description", "type", "state", "start_date", "end_date", "assigned_to"]))
            
            return "\n".join(results)
            
        except Exception as e:
            logger.error("search_changes_error",
                component="servicenow",
                operation="search_changes",
                error=str(e)
            )
            return f"Error searching change requests: {str(e)}"


class GetChangeRequestTool(BaseTool):
    """Get detailed information about a specific change request."""
    
    name = "get_change"
    description = "Retrieve detailed information about a ServiceNow change request by number or ID"
    
    class InputSchema(BaseModel):
        change_id: str = Field(description="Change number (CHG0010023) or sys_id")
        
    args_schema = InputSchema
    
    def _run(self, change_id: str) -> str:
        """Get change request details."""
        try:
            client = get_servicenow_connection()
            
            if change_id.upper().startswith("CHG"):
                builder = GlideQueryBuilder()
                builder.add_condition("number", GlideOperator.EQUALS, change_id.upper())
                params = builder.build_params()
                
                changes = client.query("change_request", params)
                if not changes:
                    return f"No change request found with number: {change_id}"
                change = changes[0]
            else:
                change = client.get("change_request", change_id)
                if not change:
                    return f"No change request found with ID: {change_id}"
            
            details = [f"Change Request Details - {change.get('number', 'Unknown')}:\n"]
            
            fields = [
                "number", "short_description", "description", "type", "state", 
                "priority", "risk", "impact", "category", "assigned_to",
                "assignment_group", "start_date", "end_date", "requested_by",
                "justification", "implementation_plan", "backout_plan", "test_plan",
                "sys_id"
            ]
            
            details.append(format_servicenow_record(change, fields))
            
            return "\n".join(details)
            
        except Exception as e:
            logger.error("get_change_error",
                component="servicenow",
                operation="get_change",
                error=str(e),
                change_id=change_id
            )
            return f"Error retrieving change request: {str(e)}"


class CreateChangeRequestTool(BaseTool):
    """Create a new change request in ServiceNow."""
    
    name = "create_change"
    description = """Create a new ServiceNow change request.
    
    Types: Normal, Standard, Emergency
    Required: short_description, type"""
    
    class InputSchema(BaseModel):
        short_description: str = Field(description="Brief description of the change")
        type: str = Field(description="Change type: Normal, Standard, or Emergency")
        description: Optional[str] = Field(None, description="Detailed description")
        justification: Optional[str] = Field(None, description="Business justification")
        risk: Optional[str] = Field("3", description="Risk level (1=High, 2=Medium, 3=Low)")
        impact: Optional[str] = Field("3", description="Impact (1=High, 2=Medium, 3=Low)")
        start_date: Optional[str] = Field(None, description="Planned start date (YYYY-MM-DD HH:MM:SS)")
        end_date: Optional[str] = Field(None, description="Planned end date (YYYY-MM-DD HH:MM:SS)")
        assignment_group: Optional[str] = Field(None, description="Assignment group")
        
    args_schema = InputSchema
    
    def _run(self, short_description: str, type: str, **kwargs) -> str:
        """Create a new change request."""
        try:
            client = get_servicenow_connection()
            
            # Validate type
            valid_types = ["Normal", "Standard", "Emergency"]
            if type not in valid_types:
                return f"Invalid change type. Must be one of: {', '.join(valid_types)}"
            
            change_data = {
                "short_description": short_description,
                "type": type,
                "state": "-5",  # Draft
            }
            
            # Add optional fields
            for field in ["description", "justification", "risk", "impact", 
                         "start_date", "end_date", "assignment_group"]:
                if field in kwargs and kwargs[field]:
                    change_data[field] = kwargs[field]
            
            result = client.create("change_request", change_data)
            
            if result:
                return f"""✓ Change request created successfully:
- Number: {result.get('number')}
- Type: {result.get('type', {}).get('display_value', type)}
- State: {result.get('state', {}).get('display_value', 'Draft')}
- Risk: {result.get('risk', {}).get('display_value', 'Low')}
- Sys ID: {result.get('sys_id')}"""
            else:
                return "Failed to create change request"
                
        except Exception as e:
            logger.error("create_change_error",
                component="servicenow",
                operation="create_change",
                error=str(e)
            )
            return f"Error creating change request: {str(e)}"


class UpdateChangeRequestTool(BaseTool):
    """Update an existing change request."""
    
    name = "update_change"
    description = """Update a ServiceNow change request.
    
    Common updates:
    - Change state (Draft, Scheduled, Implement, Complete)
    - Update implementation details
    - Add approval notes
    - Modify schedule"""
    
    class InputSchema(BaseModel):
        change_id: str = Field(description="Change number (CHG0010023) or sys_id")
        state: Optional[str] = Field(None, description="State (-5=Draft, 1=Scheduled, 2=Implement, 3=Complete)")
        priority: Optional[str] = Field(None, description="Priority (1-4)")
        implementation_plan: Optional[str] = Field(None, description="Implementation plan details")
        backout_plan: Optional[str] = Field(None, description="Backout plan")
        test_plan: Optional[str] = Field(None, description="Test plan")
        start_date: Optional[str] = Field(None, description="Start date (YYYY-MM-DD HH:MM:SS)")
        end_date: Optional[str] = Field(None, description="End date (YYYY-MM-DD HH:MM:SS)")
        work_notes: Optional[str] = Field(None, description="Work notes")
        
    args_schema = InputSchema
    
    def _run(self, change_id: str, **kwargs) -> str:
        """Update a change request."""
        try:
            client = get_servicenow_connection()
            
            # Get the change first
            if change_id.upper().startswith("CHG"):
                builder = GlideQueryBuilder()
                builder.add_condition("number", GlideOperator.EQUALS, change_id.upper())
                params = builder.build_params()
                
                changes = client.query("change_request", params)
                if not changes:
                    return f"No change request found with number: {change_id}"
                sys_id = changes[0]["sys_id"]
            else:
                sys_id = change_id
            
            # Build update data
            update_data = {}
            for field, value in kwargs.items():
                if value is not None:
                    update_data[field] = value
            
            if not update_data:
                return "No fields to update provided"
            
            # Update the change
            result = client.update("change_request", sys_id, update_data)
            
            if result:
                updates = []
                for field, value in update_data.items():
                    updates.append(f"- {field}: {value}")
                
                return f"""✓ Change request {result.get('number')} updated successfully:
{chr(10).join(updates)}

Current State: {result.get('state', {}).get('display_value', 'Unknown')}"""
            else:
                return "Failed to update change request"
                
        except Exception as e:
            logger.error("update_change_error",
                component="servicenow",
                operation="update_change",
                error=str(e),
                change_id=change_id
            )
            return f"Error updating change request: {str(e)}"


# ============================================================================
# PROBLEM MANAGEMENT TOOLS
# ============================================================================

class GetProblemTool(BaseTool):
    """Search for problem records."""
    
    name = "get_problem"
    description = """Search for ServiceNow problems by number, description, or root cause.
    
    Examples:
    - "active problems"
    - "problems related to email"
    - "high priority problems"""
    
    class InputSchema(BaseModel):
        query: str = Field(description="Search query for problems")
        limit: int = Field(default=10, description="Maximum results")
        
    args_schema = InputSchema
    
    def _run(self, query: str, limit: int = 10) -> str:
        """Search for problems."""
        try:
            client = get_servicenow_connection()
            builder = GlideQueryBuilder()
            
            query_lower = query.lower()
            
            # State filters
            if "active" in query_lower:
                builder.add_condition("state", GlideOperator.NOT_EQUALS, "4")  # Not Closed
            elif "closed" in query_lower:
                builder.add_condition("state", GlideOperator.EQUALS, "4")
            
            # Priority filters
            if "high priority" in query_lower or "critical" in query_lower:
                builder.add_condition("priority", GlideOperator.LESS_OR_EQUAL, "2")
            
            # Keywords
            keywords = [word for word in query.split() if len(word) > 3 and 
                       word.lower() not in ["problem", "problems", "active", "high", "priority"]]
            if keywords:
                builder.add_condition("short_description", GlideOperator.CONTAINS, " ".join(keywords))
            
            builder.order_by("priority", ascending=True)
            builder.limit(limit)
            
            params = builder.build_params()
            log_glide_query("search_problems", params.get("sysparm_query", ""))
            
            problems = client.query("problem", params)
            
            if not problems:
                return "No problems found matching your search criteria."
            
            results = [f"Found {len(problems)} problem(s):\n"]
            for prob in problems:
                results.append(f"\n{prob['number']}:")
                results.append(format_servicenow_record(prob, 
                    ["short_description", "state", "priority", "assigned_to", "opened_at"]))
            
            return "\n".join(results)
            
        except Exception as e:
            logger.error("search_problems_error",
                component="servicenow",
                operation="search_problems",
                error=str(e)
            )
            return f"Error searching problems: {str(e)}"


class GetProblemTool(BaseTool):
    """Get detailed information about a problem record."""
    
    name = "get_problem"
    description = "Retrieve detailed information about a ServiceNow problem"
    
    class InputSchema(BaseModel):
        problem_id: str = Field(description="Problem number (PRB0010023) or sys_id")
        
    args_schema = InputSchema
    
    def _run(self, problem_id: str) -> str:
        """Get problem details."""
        try:
            client = get_servicenow_connection()
            
            if problem_id.upper().startswith("PRB"):
                builder = GlideQueryBuilder()
                builder.add_condition("number", GlideOperator.EQUALS, problem_id.upper())
                params = builder.build_params()
                
                problems = client.query("problem", params)
                if not problems:
                    return f"No problem found with number: {problem_id}"
                problem = problems[0]
            else:
                problem = client.get("problem", problem_id)
                if not problem:
                    return f"No problem found with ID: {problem_id}"
            
            details = [f"Problem Details - {problem.get('number', 'Unknown')}:\n"]
            
            fields = [
                "number", "short_description", "description", "state", "priority",
                "category", "subcategory", "assigned_to", "assignment_group",
                "opened_at", "root_cause", "workaround", "known_error", "sys_id"
            ]
            
            details.append(format_servicenow_record(problem, fields))
            
            return "\n".join(details)
            
        except Exception as e:
            logger.error("get_problem_error",
                component="servicenow",
                operation="get_problem",
                error=str(e),
                problem_id=problem_id
            )
            return f"Error retrieving problem: {str(e)}"


class CreateProblemTool(BaseTool):
    """Create a new problem record in ServiceNow."""
    
    name = "create_problem"
    description = """Create a new ServiceNow problem record with known error information.
    
    Required: short_description
    Optional: description, priority, category, known_error, workaround"""
    
    class InputSchema(BaseModel):
        short_description: str = Field(description="Brief description of the problem")
        description: Optional[str] = Field(None, description="Detailed description")
        priority: Optional[str] = Field("3", description="Priority (1=Critical, 2=High, 3=Moderate, 4=Low)")
        category: Optional[str] = Field(None, description="Problem category")
        known_error: Optional[bool] = Field(False, description="Is this a known error?")
        workaround: Optional[str] = Field(None, description="Workaround instructions")
        root_cause: Optional[str] = Field(None, description="Root cause analysis")
        assignment_group: Optional[str] = Field(None, description="Assignment group")
        
    args_schema = InputSchema
    
    def _run(self, short_description: str, **kwargs) -> str:
        """Create a new problem."""
        try:
            client = get_servicenow_connection()
            
            problem_data = {
                "short_description": short_description,
                "state": "1",  # New
                "priority": kwargs.get("priority", "3"),
            }
            
            # Add optional fields
            for field in ["description", "category", "known_error", "workaround", 
                         "root_cause", "assignment_group"]:
                if field in kwargs and kwargs[field] is not None:
                    problem_data[field] = kwargs[field]
            
            result = client.create("problem", problem_data)
            
            if result:
                return f"""✓ Problem created successfully:
- Number: {result.get('number')}
- State: {result.get('state', {}).get('display_value', 'New')}
- Priority: {result.get('priority', {}).get('display_value', '3 - Moderate')}
- Known Error: {result.get('known_error', False)}
- Sys ID: {result.get('sys_id')}"""
            else:
                return "Failed to create problem"
                
        except Exception as e:
            logger.error("create_problem_error",
                component="servicenow",
                operation="create_problem",
                error=str(e)
            )
            return f"Error creating problem: {str(e)}"


class UpdateProblemTool(BaseTool):
    """Update an existing problem record."""
    
    name = "update_problem"
    description = """Update a ServiceNow problem record.
    
    Common updates:
    - Add root cause analysis
    - Update workaround
    - Mark as known error
    - Change state or priority"""
    
    class InputSchema(BaseModel):
        problem_id: str = Field(description="Problem number (PRB0010023) or sys_id")
        state: Optional[str] = Field(None, description="State (1=New, 2=Assigned, 3=Root Cause Analysis, 4=Closed)")
        priority: Optional[str] = Field(None, description="Priority (1-4)")
        root_cause: Optional[str] = Field(None, description="Root cause analysis")
        workaround: Optional[str] = Field(None, description="Workaround instructions")
        known_error: Optional[bool] = Field(None, description="Mark as known error")
        work_notes: Optional[str] = Field(None, description="Investigation notes")
        
    args_schema = InputSchema
    
    def _run(self, problem_id: str, **kwargs) -> str:
        """Update a problem."""
        try:
            client = get_servicenow_connection()
            
            # Get the problem first
            if problem_id.upper().startswith("PRB"):
                builder = GlideQueryBuilder()
                builder.add_condition("number", GlideOperator.EQUALS, problem_id.upper())
                params = builder.build_params()
                
                problems = client.query("problem", params)
                if not problems:
                    return f"No problem found with number: {problem_id}"
                sys_id = problems[0]["sys_id"]
            else:
                sys_id = problem_id
            
            # Build update data
            update_data = {}
            for field, value in kwargs.items():
                if value is not None:
                    update_data[field] = value
            
            if not update_data:
                return "No fields to update provided"
            
            # Update the problem
            result = client.update("problem", sys_id, update_data)
            
            if result:
                updates = []
                for field, value in update_data.items():
                    updates.append(f"- {field}: {value}")
                
                return f"""✓ Problem {result.get('number')} updated successfully:
{chr(10).join(updates)}

Current State: {result.get('state', {}).get('display_value', 'Unknown')}"""
            else:
                return "Failed to update problem"
                
        except Exception as e:
            logger.error("update_problem_error",
                component="servicenow",
                operation="update_problem",
                error=str(e),
                problem_id=problem_id
            )
            return f"Error updating problem: {str(e)}"


# ============================================================================
# TASK MANAGEMENT TOOLS
# ============================================================================

class GetTaskTool(BaseTool):
    """Search for generic tasks across ServiceNow tables."""
    
    name = "get_task"
    description = """Search for ServiceNow tasks across all task-based tables.
    
    Searches incidents, problems, changes, and generic tasks.
    Examples:
    - "all tasks assigned to me"
    - "overdue tasks"
    - "high priority tasks"""
    
    class InputSchema(BaseModel):
        query: str = Field(description="Search query for tasks")
        limit: int = Field(default=10, description="Maximum results")
        
    args_schema = InputSchema
    
    def _run(self, query: str, limit: int = 10) -> str:
        """Search for tasks."""
        try:
            client = get_servicenow_connection()
            builder = GlideQueryBuilder()
            
            query_lower = query.lower()
            
            # Assignment filters
            if "assigned to me" in query_lower or "my tasks" in query_lower:
                builder.add_condition("assigned_to", GlideOperator.EQUALS, "javascript:gs.getUserID()")
            elif "unassigned" in query_lower:
                builder.add_condition("assigned_to", GlideOperator.IS_EMPTY, "")
            
            # State filters
            if "overdue" in query_lower:
                builder.add_condition("due_date", GlideOperator.LESS_THAN, "javascript:gs.now()")
                builder.add_condition("state", GlideOperator.NOT_IN, "3,4,7")  # Not complete/closed
            elif "open" in query_lower or "active" in query_lower:
                builder.add_condition("active", GlideOperator.EQUALS, "true")
            
            # Priority
            if "high priority" in query_lower:
                builder.add_condition("priority", GlideOperator.LESS_OR_EQUAL, "2")
            
            # Keywords
            keywords = [word for word in query.split() if len(word) > 3 and 
                       word.lower() not in ["task", "tasks", "assigned", "overdue", "open"]]
            if keywords:
                builder.add_condition("short_description", GlideOperator.CONTAINS, " ".join(keywords))
            
            builder.order_by("priority", ascending=True)
            builder.order_by("due_date", ascending=True)
            builder.limit(limit)
            
            params = builder.build_params()
            log_glide_query("get_task", params.get("sysparm_query", ""))
            
            tasks = client.query("task", params)
            
            if not tasks:
                return "No tasks found matching your search criteria."
            
            results = [f"Found {len(tasks)} task(s):\n"]
            for task in tasks:
                task_type = task.get('sys_class_name', 'task')
                results.append(f"\n{task['number']} ({task_type}):")
                results.append(format_servicenow_record(task, 
                    ["short_description", "state", "priority", "assigned_to", "due_date"]))
            
            return "\n".join(results)
            
        except Exception as e:
            logger.error("get_task_error",
                component="servicenow",
                operation="get_task",
                error=str(e)
            )
            return f"Error searching tasks: {str(e)}"


class CreateTaskTool(BaseTool):
    """Create a generic task in ServiceNow."""
    
    name = "create_task"
    description = """Create a new generic task with assignment and due dates.
    
    Required: short_description
    Optional: description, priority, assigned_to, due_date"""
    
    class InputSchema(BaseModel):
        short_description: str = Field(description="Brief description of the task")
        description: Optional[str] = Field(None, description="Detailed description")
        priority: Optional[str] = Field("3", description="Priority (1-5)")
        assigned_to: Optional[str] = Field(None, description="Username to assign to")
        assignment_group: Optional[str] = Field(None, description="Assignment group")
        due_date: Optional[str] = Field(None, description="Due date (YYYY-MM-DD HH:MM:SS)")
        
    args_schema = InputSchema
    
    def _run(self, short_description: str, **kwargs) -> str:
        """Create a task."""
        try:
            client = get_servicenow_connection()
            
            task_data = {
                "short_description": short_description,
                "state": "1",  # Open
                "priority": kwargs.get("priority", "3"),
            }
            
            # Add optional fields
            for field in ["description", "assigned_to", "assignment_group", "due_date"]:
                if field in kwargs and kwargs[field]:
                    task_data[field] = kwargs[field]
            
            result = client.create("task", task_data)
            
            if result:
                return f"""✓ Task created successfully:
- Number: {result.get('number')}
- State: {result.get('state', {}).get('display_value', 'Open')}
- Priority: {result.get('priority', {}).get('display_value', '3')}
- Assigned To: {result.get('assigned_to', {}).get('display_value', 'Unassigned')}
- Due Date: {result.get('due_date', 'Not set')}
- Sys ID: {result.get('sys_id')}"""
            else:
                return "Failed to create task"
                
        except Exception as e:
            logger.error("create_task_error",
                component="servicenow",
                operation="create_task",
                error=str(e)
            )
            return f"Error creating task: {str(e)}"


class UpdateTaskTool(BaseTool):
    """Update a generic task."""
    
    name = "update_task"
    description = """Update task progress and completion status.
    
    Common updates:
    - Change state (Open, Work in Progress, Complete)
    - Update assignment
    - Modify due date"""
    
    class InputSchema(BaseModel):
        task_id: str = Field(description="Task number or sys_id")
        state: Optional[str] = Field(None, description="State (1=Open, 2=Work in Progress, 3=Complete)")
        priority: Optional[str] = Field(None, description="Priority (1-5)")
        assigned_to: Optional[str] = Field(None, description="Username to assign to")
        due_date: Optional[str] = Field(None, description="Due date (YYYY-MM-DD HH:MM:SS)")
        work_notes: Optional[str] = Field(None, description="Progress notes")
        
    args_schema = InputSchema
    
    def _run(self, task_id: str, **kwargs) -> str:
        """Update a task."""
        try:
            client = get_servicenow_connection()
            
            # Build update data
            update_data = {}
            for field, value in kwargs.items():
                if value is not None:
                    update_data[field] = value
            
            if not update_data:
                return "No fields to update provided"
            
            # Update the task
            result = client.update("task", task_id, update_data)
            
            if result:
                updates = []
                for field, value in update_data.items():
                    updates.append(f"- {field}: {value}")
                
                return f"""✓ Task {result.get('number')} updated successfully:
{chr(10).join(updates)}

Current State: {result.get('state', {}).get('display_value', 'Unknown')}"""
            else:
                return "Failed to update task"
                
        except Exception as e:
            logger.error("update_task_error",
                component="servicenow",
                operation="update_task",
                error=str(e),
                task_id=task_id
            )
            return f"Error updating task: {str(e)}"


# ============================================================================
# SERVICE REQUEST TOOLS
# ============================================================================

class SearchServiceRequestsTool(BaseTool):
    """Search for service requests (RITMs)."""
    
    name = "search_requests"
    description = """Search for ServiceNow service requests/catalog items.
    
    Examples:
    - "laptop requests"
    - "pending software requests"
    - "my service requests"""
    
    class InputSchema(BaseModel):
        query: str = Field(description="Search query for service requests")
        limit: int = Field(default=10, description="Maximum results")
        
    args_schema = InputSchema
    
    def _run(self, query: str, limit: int = 10) -> str:
        """Search for service requests."""
        try:
            client = get_servicenow_connection()
            builder = GlideQueryBuilder()
            
            query_lower = query.lower()
            
            # State filters
            if "pending" in query_lower or "open" in query_lower:
                builder.add_condition("state", GlideOperator.NOT_IN, "3,4,7")  # Not Closed Complete/Incomplete/Cancelled
            elif "complete" in query_lower:
                builder.add_condition("state", GlideOperator.EQUALS, "3")
            
            # Assignment
            if "my requests" in query_lower or "my service" in query_lower:
                builder.add_condition("requested_for", GlideOperator.EQUALS, "javascript:gs.getUserID()")
            
            # Keywords
            keywords = [word for word in query.split() if len(word) > 3 and 
                       word.lower() not in ["service", "request", "requests", "pending", "open"]]
            if keywords:
                builder.add_condition("short_description", GlideOperator.CONTAINS, " ".join(keywords))
            
            builder.order_by("opened_at", ascending=False)
            builder.limit(limit)
            
            params = builder.build_params()
            log_glide_query("search_requests", params.get("sysparm_query", ""))
            
            requests = client.query("sc_req_item", params)
            
            if not requests:
                return "No service requests found matching your search criteria."
            
            results = [f"Found {len(requests)} service request(s):\n"]
            for req in requests:
                results.append(f"\n{req['number']}:")
                results.append(format_servicenow_record(req, 
                    ["short_description", "state", "requested_for", "opened_at", "stage"]))
            
            return "\n".join(results)
            
        except Exception as e:
            logger.error("search_requests_error",
                component="servicenow",
                operation="search_requests",
                error=str(e)
            )
            return f"Error searching service requests: {str(e)}"


class CreateServiceRequestTool(BaseTool):
    """Create a new service request."""
    
    name = "create_request"
    description = """Create a new ServiceNow service request/catalog item.
    
    Common requests: laptop, software access, account creation"""
    
    class InputSchema(BaseModel):
        short_description: str = Field(description="Brief description of the request")
        description: Optional[str] = Field(None, description="Detailed description")
        requested_for: Optional[str] = Field(None, description="Username of person request is for")
        
    args_schema = InputSchema
    
    def _run(self, short_description: str, description: Optional[str] = None,
             requested_for: Optional[str] = None) -> str:
        """Create a service request."""
        try:
            client = get_servicenow_connection()
            
            request_data = {
                "short_description": short_description,
                "state": "1",  # Open
            }
            
            if description:
                request_data["description"] = description
            if requested_for:
                request_data["requested_for"] = requested_for
            
            result = client.create("sc_req_item", request_data)
            
            if result:
                return f"""✓ Service request created successfully:
- Number: {result.get('number')}
- State: {result.get('state', {}).get('display_value', 'Open')}
- Requested For: {result.get('requested_for', {}).get('display_value', 'Current User')}
- Sys ID: {result.get('sys_id')}"""
            else:
                return "Failed to create service request"
                
        except Exception as e:
            logger.error("create_request_error",
                component="servicenow",
                operation="create_request",
                error=str(e)
            )
            return f"Error creating service request: {str(e)}"


# ============================================================================
# USER & CMDB TOOLS
# ============================================================================

class GetUserTool(BaseTool):
    """Search for ServiceNow users."""
    
    name = "get_user"
    description = """Search for ServiceNow users by name, email, department, or role.
    
    Examples:
    - "john smith"
    - "john.smith@company.com"
    - "active users in IT department"""
    
    class InputSchema(BaseModel):
        query: str = Field(description="Search query for users")
        limit: int = Field(default=10, description="Maximum results")
        
    args_schema = InputSchema
    
    def _run(self, query: str, limit: int = 10) -> str:
        """Search for users."""
        try:
            client = get_servicenow_connection()
            
            # Use the query template for user search
            builder = QueryTemplates.user_search(query)
            
            # Add additional filters based on query
            query_lower = query.lower()
            if "active" in query_lower:
                builder.add_condition("active", GlideOperator.EQUALS, "true")
            elif "inactive" in query_lower:
                builder.add_condition("active", GlideOperator.EQUALS, "false")
            
            # Department filter
            if "department" in query_lower:
                dept_keywords = query_lower.split("department")[1].strip().split()[0]
                builder.add_condition("department", GlideOperator.CONTAINS, dept_keywords)
            
            builder.limit(limit)
            params = builder.build_params()
            log_glide_query("search_users", params.get("sysparm_query", ""))
            
            users = client.query("sys_user", params)
            
            if not users:
                return "No users found matching your search criteria."
            
            results = [f"Found {len(users)} user(s):\n"]
            for user in users:
                results.append(f"\n{user.get('name', 'Unknown')}:")
                results.append(format_servicenow_record(user, 
                    ["user_name", "email", "department", "title", "manager", "active", "sys_id"]))
            
            return "\n".join(results)
            
        except Exception as e:
            logger.error("search_users_error",
                component="servicenow",
                operation="search_users",
                error=str(e)
            )
            return f"Error searching users: {str(e)}"


class GetCMDBItemTool(BaseTool):
    """Search for Configuration Items in the CMDB."""
    
    name = "get_cmdb_item"
    description = """Search for ServiceNow Configuration Items (CIs) by name, class, or relationships.
    
    Examples:
    - "web servers"
    - "database servers in production"
    - "windows servers"
    - "CIs related to email service"""
    
    class InputSchema(BaseModel):
        query: str = Field(description="Search query for configuration items")
        ci_class: Optional[str] = Field(None, description="CI class (e.g., cmdb_ci_server, cmdb_ci_database)")
        limit: int = Field(default=10, description="Maximum results")
        
    args_schema = InputSchema
    
    def _run(self, query: str, ci_class: Optional[str] = None, limit: int = 10) -> str:
        """Search for CMDB items."""
        try:
            client = get_servicenow_connection()
            
            # Determine table to query
            table = ci_class or "cmdb_ci"
            
            builder = GlideQueryBuilder()
            
            query_lower = query.lower()
            
            # Environment filters
            if "production" in query_lower or "prod" in query_lower:
                builder.add_condition("environment", GlideOperator.EQUALS, "Production")
            elif "development" in query_lower or "dev" in query_lower:
                builder.add_condition("environment", GlideOperator.EQUALS, "Development")
            elif "test" in query_lower:
                builder.add_condition("environment", GlideOperator.EQUALS, "Test")
            
            # State filters
            if "active" in query_lower:
                builder.add_condition("operational_status", GlideOperator.EQUALS, "1")  # Operational
            elif "retired" in query_lower:
                builder.add_condition("operational_status", GlideOperator.EQUALS, "6")  # Retired
            
            # Class-specific filters
            if "server" in query_lower and not ci_class:
                table = "cmdb_ci_server"
            elif "database" in query_lower and not ci_class:
                table = "cmdb_ci_database"
            elif "application" in query_lower and not ci_class:
                table = "cmdb_ci_appl"
            
            # Keywords
            keywords = [word for word in query.split() if len(word) > 3 and 
                       word.lower() not in ["cmdb", "item", "items", "configuration", "production", "development"]]
            if keywords:
                builder.add_condition("name", GlideOperator.CONTAINS, " ".join(keywords))
                builder.add_or_condition("short_description", GlideOperator.CONTAINS, " ".join(keywords))
            
            builder.order_by("name", ascending=True)
            builder.limit(limit)
            
            params = builder.build_params()
            log_glide_query("get_cmdb_item", params.get("sysparm_query", ""))
            
            items = client.query(table, params)
            
            if not items:
                return f"No configuration items found matching your search criteria in {table}."
            
            results = [f"Found {len(items)} configuration item(s):\n"]
            for item in items:
                ci_class_name = item.get('sys_class_name', table)
                results.append(f"\n{item.get('name', 'Unknown')} ({ci_class_name}):")
                results.append(format_servicenow_record(item, 
                    ["name", "operational_status", "environment", "location", 
                     "assigned_to", "support_group", "sys_id"]))
            
            return "\n".join(results)
            
        except Exception as e:
            logger.error("get_cmdb_item_error",
                component="servicenow",
                operation="get_cmdb_item",
                error=str(e)
            )
            return f"Error searching CMDB: {str(e)}"


class SearchServiceNowTool(BaseTool):
    """Global search across multiple ServiceNow tables with encoded queries."""
    
    name = "search_servicenow"
    description = """Perform a global search across ServiceNow tables using encoded queries.
    
    This is the most flexible search tool, allowing complex queries across any table.
    
    Examples:
    - Search incidents: table=incident, query="priority=1^state!=7"
    - Search all tasks: table=task, query="assigned_to=javascript:gs.getUserID()"
    - Search changes by date: table=change_request, query="opened_at>javascript:gs.daysAgo(7)"
    
    Supports all GlideRecord query operators and JavaScript functions."""
    
    class InputSchema(BaseModel):
        table: str = Field(description="ServiceNow table name (incident, problem, change_request, task, etc.)")
        encoded_query: Optional[str] = Field(None, description="Encoded query string (e.g., 'state=1^priority<=2')")
        fields: Optional[List[str]] = Field(None, description="Fields to return")
        limit: int = Field(default=20, description="Maximum results")
        order_by: Optional[str] = Field(None, description="Field to order by (prefix with - for descending)")
        
    args_schema = InputSchema
    
    def _run(self, table: str, encoded_query: Optional[str] = None, 
             fields: Optional[List[str]] = None, limit: int = 20,
             order_by: Optional[str] = None) -> str:
        """Perform global search."""
        try:
            client = get_servicenow_connection()
            
            builder = GlideQueryBuilder()
            
            # Parse encoded query if provided
            if encoded_query:
                # For simplicity, we'll pass it directly as sysparm_query
                # In a full implementation, we'd parse and validate it
                params = {
                    "sysparm_query": encoded_query,
                    "sysparm_limit": str(limit),
                    "sysparm_display_value": "true"
                }
                
                if fields:
                    params["sysparm_fields"] = ",".join(fields)
                
                if order_by:
                    if order_by.startswith("-"):
                        params["sysparm_query"] += f"^ORDERBYDESC{order_by[1:]}"
                    else:
                        params["sysparm_query"] += f"^ORDERBY{order_by}"
            else:
                # Use builder for empty query
                builder.limit(limit)
                if fields:
                    builder.fields(fields)
                if order_by:
                    if order_by.startswith("-"):
                        builder.order_by(order_by[1:], ascending=False)
                    else:
                        builder.order_by(order_by, ascending=True)
                params = builder.build_params()
            
            log_glide_query("search_servicenow", params.get("sysparm_query", ""))
            
            results = client.query(table, params)
            
            if not results:
                return f"No records found in {table} table."
            
            # Format results
            output = [f"Found {len(results)} record(s) in {table}:\n"]
            
            for record in results:
                # Determine key identifier field
                id_field = "number" if "number" in record else "name" if "name" in record else "sys_id"
                output.append(f"\n{record.get(id_field, 'Record')}:")
                
                # Display requested fields or default set
                display_fields = fields if fields else ["number", "short_description", "state", "priority", "assigned_to"]
                display_fields = [f for f in display_fields if f in record]
                
                output.append(format_servicenow_record(record, display_fields))
            
            return "\n".join(output)
            
        except Exception as e:
            logger.error("search_servicenow_error",
                component="servicenow",
                operation="search_servicenow",
                error=str(e),
                table=table
            )
            return f"Error searching {table}: {str(e)}"


# Export all tools
ALL_SERVICENOW_TOOLS = [
    # Incident Management (3 tools)
    GetIncidentTool(),
    CreateIncidentTool(),
    UpdateIncidentTool(),
    # Change Management (3 tools)
    GetChangeRequestTool(),
    CreateChangeRequestTool(),
    UpdateChangeRequestTool(),
    # Problem Management (3 tools)
    GetProblemTool(),
    CreateProblemTool(),
    UpdateProblemTool(),
    # Task Management (3 tools)
    GetTaskTool(),
    CreateTaskTool(),
    UpdateTaskTool(),
    # User & CMDB Tools (3 tools)
    GetUserTool(),
    GetCMDBItemTool(),
    SearchServiceNowTool(),
]